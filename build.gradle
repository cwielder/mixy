plugins {
    id 'dev.architectury.loom' version '1.5-SNAPSHOT'
    id 'maven-publish'
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

version = project.mod_version
group = project.maven_group

repositories {
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.terraformersmc.com/releases/" }
    maven { url "https://maven.minecraftforge.net" }
    maven { url "https://maven.blamejared.com/" }
}

processResources {
    inputs.property "version", project.version
    archivesBaseName = "voxy"
    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

loom {
    mixin.defaultRefmapName = "voxy.refmap.json"
    accessWidenerPath = file("src/main/resources/voxy.accesswidener")

    forge {
        mixinConfigs = [
                "voxy.mixins.json"
        ]
    }
}

configurations {
    bundle {
        // bundle command, to copy jar contents with the shadow plugin
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.layered() {
        it.mappings("net.fabricmc:yarn:${project.yarn_mappings}:v2")
        it.mappings file("mappings/yarnpatch.tiny")
    }
    forge "net.minecraftforge:forge:${project.minecraft_version}-${project.neoforge_version}"

//    modImplementation(fabricApi.module("fabric-api-base", project.fabric_version))
//    modImplementation(fabricApi.module("fabric-rendering-fluids-v1", project.fabric_version))
//    modImplementation(fabricApi.module("fabric-resource-loader-v0", project.fabric_version))
//    modImplementation(fabricApi.module("fabric-command-api-v2", project.fabric_version))
//    modImplementation("net.fabricmc.fabric-api:fabric-rendering-data-attachment-v1:0.3.38+73761d2e9a")
//
//    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    //TODO: this is to eventually not need sodium installed as atm its just used for parsing shaders
    modRuntimeOnly "maven.modrinth:embeddium:0.3.11+mc1.20.1"
    modCompileOnly "maven.modrinth:embeddium:0.3.11+mc1.20.1"

    //modRuntimeOnly "maven.modrinth:nvidium:0.2.6-beta"
    modCompileOnly "maven.modrinth:nvidium:0.2.6-beta"

    modImplementation("maven.modrinth:cloth-config:11.1.118+forge")
    //modImplementation("maven.modrinth:modmenu:9.0.0")
    modCompileOnly("maven.modrinth:iris:1.7.0+1.20.1")
    //modRuntimeOnly("maven.modrinth:iris:1.6.17+1.20.4")
    modCompileOnly("maven.modrinth:starlight:1.1.2+1.20")
    //modCompileOnly("maven.modrinth:immersiveportals:v5.1.7-mc1.20.4")
    modCompileOnly("maven.modrinth:vivecraft:1.20.1-1.1.7-forge")
}


def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [
            project.configurations.bundle
    ]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    atAccessWideners.add('voxy.accesswidener')
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

project.ext.lwjglVersion = "3.3.1"
project.ext.lwjglNatives = "natives-windows"

repositories {
    mavenCentral()
}

dependencies {
    implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")

    implementation "org.lwjgl:lwjgl"
    forgeRuntimeLibrary "org.lwjgl:lwjgl"
    bundle(implementation "org.lwjgl:lwjgl-lmdb") { transitive = false }
    forgeRuntimeLibrary "org.lwjgl:lwjgl-lmdb"
    bundle(implementation "org.lwjgl:lwjgl-zstd") { transitive = false }
    forgeRuntimeLibrary "org.lwjgl:lwjgl-zstd"

    forgeRuntimeLibrary "org.lwjgl:lwjgl:$lwjglVersion:natives-windows"
    forgeRuntimeLibrary "org.lwjgl:lwjgl:$lwjglVersion:natives-linux"
    bundle(forgeRuntimeLibrary "org.lwjgl:lwjgl-lmdb:$lwjglVersion:natives-windows") { transitive = false }
    bundle(forgeRuntimeLibrary "org.lwjgl:lwjgl-zstd:$lwjglVersion:natives-windows") { transitive = false }
    bundle(forgeRuntimeLibrary "org.lwjgl:lwjgl-lmdb:$lwjglVersion:natives-linux") { transitive = false }
    bundle(forgeRuntimeLibrary "org.lwjgl:lwjgl-zstd:$lwjglVersion:natives-linux") { transitive = false }

    bundle(implementation 'org.rocksdb:rocksdbjni:8.10.0') { transitive = false }
    forgeRuntimeLibrary 'org.rocksdb:rocksdbjni:8.10.0'
    bundle(implementation 'redis.clients:jedis:5.1.0') { transitive = false }
    forgeRuntimeLibrary 'redis.clients:jedis:5.1.0'
    bundle(implementation 'org.apache.commons:commons-pool2:2.12.0') { transitive = false }
    forgeRuntimeLibrary 'org.apache.commons:commons-pool2:2.12.0'
    //implementation 'org.rocksdb:rocksdbjni:8.10.0'
    //implementation 'redis.clients:jedis:5.1.0'
}